/*
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:

		1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 * Let us list the factors of the first seven triangle numbers:

		 1: 1
		 3: 1,3
		 6: 1,2,3,6
		10: 1,2,5,10
		15: 1,3,5,15
		21: 1,3,7,21
		28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
#include <iostream>
#include <math.h>
using namespace std;
int primeTab[10000];

bool isPrime(int n)
{
	if (n == 1) return false;
	else if (n < 4) return true;
	else if (n % 2 == 0) return false;
	else if (n < 9) return true;
	else if (n % 3 == 0) return false;
	else
	{
	    int r = sqrt(n);
		for (int i = 5; i <= r; i = i + 6)
		{
			if (n % i == 0) return false;
			if (n % (i + 2) == 0) return false;
		}
	}
	return true;
}

void makePrime(int A[], int num)
{
	int rec = 0;
	for (int n = 2; ; n++)
	{
		if (isPrime(n))	A[rec++] = n;
		if (rec == num) break;
	}
}

int main()
{
/*	//brute force
	long sum = 1;
	for (long i = 1; ; i++, sum += i)
	{
		int counter = 0;
		for (long j = 1; j <= sum; j++)
			if (sum % j == 0)
				counter++;
		if (counter > 500)
		{
			cout << "The desired number is: " << sum << endl;
			break;
		}
	}
*/
	makePrime(primeTab, 1000);
	int counter = 1, sum = 1;
	int cnt = 2, cnt1 = 1;
	//start from the 2nd triangle number == 3
	for (int n = 2; ; n++)
	{
		int nt = n + 1;
		sum += n;
		cnt1 = 1;		//reset working variant

		if (nt % 2 == 0) nt = nt / 2;

		for (int i = 0; i < 1000; i++)
		{
			if (primeTab[i] * primeTab[i] > nt)
			{
			    //cnt1 = cnt1 * (1 + 1) ---add nt itself(last divisor)
				cnt1 = cnt1 * 2;
				break;
			}

			int exponent = 1;
			while (nt % primeTab[i] == 0)
			{
				exponent++;
				nt = nt / primeTab[i];
			}
			if (exponent > 1) cnt1 = cnt1 * exponent;
			if (nt == 1) break;     //termination of one trial
		}
		counter = cnt * cnt1;
		cnt = cnt1;		//reuse for the next time
		//check whether finished
		if (counter > 500)
		{
			cout << "The number is: " << sum << endl;
			break;
		}
	}
	return 0;
}
